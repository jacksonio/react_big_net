{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Loader/Loader.module.css","assets/images/userPhoto.png","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileMediaNetwork.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Common/FormsControls.tsx","api/api.ts","serviceWorker.js","api/apiTypes.ts","api/profile-api.ts","api/auth-api.ts","redux/profile-reducer.ts","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileMediaNetwork.js","components/Profile/ProfileInfo/ProfileMainInfo.tsx","components/Profile/ProfileInfo/ProfileMainInfoForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Settings/Settings.tsx","components/News/News.tsx","components/Music/Music.tsx","api/security-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","redux/users-selectors.ts","utils/validators/validators.ts","components/Loader/Loader.tsx","components/Common/FormControls.module.css","api/users-api.ts","redux/users-reducer.ts"],"names":["module","exports","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","type","newMessage","text","dialogsActions","addMessageActionCreator","subscribers","ws","closeWsHandler","console","log","setTimeout","createChanel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","removeEventListener","close","WebSocket","addEventListener","chatApi","callback","push","filter","send","chatReducer","payload","chatActions","_newMessageHandler","newMessagesHandlerCreator","dispatch","startMessagesListening","a","stopMessagesListening","sendMessage","FormControl","meta","children","hasError","touched","error","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","validate","instance","axios","create","withCredentials","baseURL","headers","Boolean","window","location","hostname","match","LoginResultCodes","CaptchResultCode","profileAPI","userId","get","then","response","status","put","photo","formData","FormData","append","authAPI","profile","email","password","rememberMe","captcha","post","resp","delete","posts","likesCount","profileActions","addPostActionCreator","postText","setUserStatus","setUserProfile","userProfile","savePhotoSuccess","setUserProfileThunk","usersActions","toggleLoading","ProfileStatus","useSelector","getStatus","useDispatch","useState","editMode","setEditMode","curStatus","setStatus","useEffect","onDoubleClick","onChange","currentTarget","value","autoFocus","onBlur","resultCode","updateUserStatusThunk","socialTitle","socialLink","classes","socialItemBLock","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","isOwner","onClick","Object","keys","contacts","map","contact","ProfileMediaNetwork","key","ProfileMainInfoFormContainer","reduxForm","form","onSubmit","handleSubmit","formSummaryError","getProfile","profileDescription","width","src","photos","large","userPhoto","alt","file","target","files","length","initialValues","profileInfo","getState","auth","toLowerCase","stopSubmit","Promise","reject","ProfileMainInfo","Post","item","MyPosts","React","memo","messagesRef","createRef","PostsBlock","PostReduxForm","values","container","ref","toString","maxLength30","maxLength","minLength5","minLength","onSubmitSuccess","result","reset","requiredFields","MyPostsContainer","connect","profilePage","Profile","isLoading","getIsLoading","Loader","ProfileInfo","compose","withRouter","authorizedUserId","getUserId","checkUser","params","history","getUserStatusThunk","securityAPI","login","isFetching","isAuth","captchaUrl","authActions","setUserDataThunk","usersAPI","getUserData","Success","getCaptchaThunk","url","LoginReduxForm","Field","LoginPage","to","CaptchIsRequired","_error","loginUserThunk","isInitialiazed","appActions","friends","reducers","combineReducers","newPost","dialogsPage","usersPage","usersReducer","sidebar","app","chat","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","withSuspense","Component","Suspense","fallback","getIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","style","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","UsersContainer","ChatPage","DialogsWithSuspended","ChatWithSuspended","App","handleAllUncaughtErrors","this","initialiazeApp","initialiazed","padding","height","title","LaptopOutlined","WechatOutlined","minHeight","path","render","exact","from","Settings","News","Music","color","danger","textAlign","mapDispatchToProps","AppContainer","AppContainerRender","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","getUsers","users","getTotalUsersCount","totalUsersCount","getPageSize","pageSize","getCurrentPage","currentPage","getIsFollowing","isFollowingInProgress","getFilter","loader","term","friend","unfollowUser","followUser","u","isFollow","following","toggleFollowing","setUsers","setCurrentPage","setFilter","setTotalUsersCount","followingInProgress","getUsersThunkCreator","items","totalCount","followingUser","unfollowingUser"],"mappings":"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","file":"static/js/main.2ab04582.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostsBlock\":\"MyPosts_PostsBlock__oOV-F\",\"container\":\"MyPosts_container__3wha9\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loader_container__3LFDG\",\"loader\":\"Loader_loader__1j2Bs\",\"animloader\":\"Loader_animloader__2sfsV\"};","module.exports = __webpack_public_path__ + \"static/media/userPhoto.4799a585.png\";","import {InferActionTypes} from \"./redux-store\";\n\nexport type DialogsType = {\n    id: number,\n    name: string\n}\nexport type MessageType = {\n    id: number,\n    message: string\n}\n\nconst initialState = {\n    dialogs: [\n        {id: 1, name: 'Dimych'},\n        {id: 2, name: 'Andrew'},\n        {id: 3, name: 'Sveta'},\n        {id: 4, name: 'Sasha'},\n        {id: 5, name: 'Viktor'},\n        {id: 6, name: 'Valera'}\n    ] as Array<DialogsType>,\n    messages: [\n        {id: 1, message: 'Hi'},\n        {id: 2, message: 'How is your it-kamasutra?'},\n        {id: 3, message: 'Yo'},\n        {id: 4, message: 'Yo'},\n        {id: 5, message: 'Yo'}\n    ] as Array<MessageType>,\n}\n\nexport type initialStateType = typeof initialState;\n\n\n\nexport const dialogsReducer = (state: initialStateType = initialState, action: DialogsActionTypes): initialStateType => {\n\n    switch (action.type) {\n        case \"DIALOGS/ADD_MESSAGE\" : {\n            const newMessage = {\n                id: 6,\n                message: action.text,\n            }\n            return {\n                ...state,\n                messages: [...state.messages, newMessage],\n            }\n\n        }\n        default: {\n            return {...state}\n        }\n    }\n}\n\n\nexport const dialogsActions = {\n    addMessageActionCreator : (text: string) => ({type: \"DIALOGS/ADD_MESSAGE\", text} as const)\n}\n\ntype DialogsActionTypes = InferActionTypes<typeof dialogsActions>\n\n\n","\n\nlet subscribers = [] as SubscriberType[]\n\nlet ws: WebSocket | null = null\n\nconst closeWsHandler = () => {\n    console.log('closed')\n    setTimeout(createChanel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n    const newMessages = JSON.parse(e.data)\n    subscribers.forEach(s => s(newMessages))\n}\n\nconst createChanel = () => {\n    ws?.removeEventListener('close', closeWsHandler)\n    ws?.close()\n\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    ws.addEventListener('close', closeWsHandler)\n    ws.addEventListener('message', messageHandler)\n}\n\nexport const chatApi = {\n    start() {\n        createChanel()\n    },\n    stop() {\n        subscribers = []\n        ws?.close()\n        ws?.removeEventListener('close', closeWsHandler)\n        ws?.removeEventListener('message', messageHandler)\n    },\n    subscribe(callback: SubscriberType) {\n        subscribers.push(callback)\n\n        return () => {\n        subscribers = subscribers.filter(s => s !== callback)\n        }\n    },\n    unsubscribe(callback: SubscriberType) {\n        subscribers = subscribers.filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n\n}\n\n\n\nexport type SubscriberType = (messages: ChatMessageType[]) => void\n\nexport type ChatMessageType = {\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n}\n","import {BaseThunkAction, InferActionTypes} from \"./redux-store\";\nimport {chatApi, ChatMessageType} from \"../api/chat-api\";\nimport {Dispatch} from \"redux\";\nimport {message} from \"antd\";\n\nconst initialState = {\n    messages: [] as ChatMessageType[]\n}\n\nexport const chatReducer = (state = initialState, action: ChatActionTypes): InitialStateType => {\n    switch (action.type) {\n        case \"SN/chat/MESSAGES_RECEIVED\": {\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages]\n            }\n        }\n        default: {\n            return {...state}\n        }\n    }\n}\n\n\nexport const chatActions = {\n    messagesReceived: (messages: ChatMessageType[]) => ({\n        type: \"SN/chat/MESSAGES_RECEIVED\",\n        payload: {messages}\n    } as const),\n}\n\n\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null\n\nconst newMessagesHandlerCreator = (dispatch: Dispatch) => {\n    if(_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(chatActions.messagesReceived(messages))\n        }\n    }\n\n    return _newMessageHandler\n}\n\nexport const startMessagesListening = (): ChatThunkType => async (dispatch) => {\n    chatApi.start()\n    chatApi.subscribe(newMessagesHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ChatThunkType => async (dispatch) => {\n    chatApi.unsubscribe(newMessagesHandlerCreator(dispatch) )\n}\n\nexport const sendMessage = (message: string): ChatThunkType => async (dispatch) => {\n    chatApi.sendMessage(message)\n}\n\n\ntype InitialStateType = typeof initialState\ntype ChatActionTypes = InferActionTypes<typeof chatActions>\ntype ChatThunkType = BaseThunkAction<ChatActionTypes>\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileDescription\":\"ProfileInfo_profileDescription__1ViSc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"socialItemBLock\":\"ProfileMediaNetwork_socialItemBLock__1yehf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React from \"react\";\nimport styles from './FormControls.module.css'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\nimport {FieldValidator} from \"../../utils/validators/validators\";\n\n\ninterface FormsControlsProps {\n    meta: WrappedFieldMetaProps\n    children: React.ReactNode\n}\n\nconst FormControl: React.FC<FormsControlsProps> = ({meta, children}: FormsControlsProps) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={styles.formControl + \" \" + (hasError ?  styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            <div>\n                {hasError && <span>{meta.error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Textarea:  React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n\n    return (<FormControl {...props}>\n        <textarea  {...input} {...restProps} />\n    </FormControl>)\n}\n\n\n\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n\n    return (<FormControl {...props}>\n        <input  {...input} {...restProps} />\n    </FormControl>)\n}\n\n\n// також в місці де ми визиваємо цей createField ми маємо передати ключі таким образом : якщо у нас є інтерфейс який описує пропси які можуть бути створені типу login password і тд ми пишемо createField<TypesKeys>(...), де TypesKeys - Extract<keyof тут_інтерфейс_із_цими_ключами, тут має бути тип того свойства який підходить нам як ключ(наприклад string)>\nexport function createField<T extends string>(placeholder: string | undefined,\n                            name: T,\n                            validators: FieldValidator[],\n                            component: React.FC<WrappedFieldProps>,\n                             props = {},\n                            text = \"\") {\n    return ( <div>\n            <Field placeholder={placeholder} name={name}\n                   validate={validators}\n                   component={component}\n                   {...props}\n            />{text}\n        </div>)\n}\n\n// import React from \"react\";\n// import styles from './FormControls.module.css'\n// import {Field} from \"redux-form\";\n//\n//\n// const FormControl = ({input, meta, child, ...props}) => {\n//     const hasError = meta.touched && meta.error\n//     return (\n//         <div className={styles.formControl + \" \" + (meta.touched || meta.required ?  styles.error : '')}>\n//             <div>\n//                 {props.children}\n//             </div>\n//             <div>\n//                 {hasError && <span>{meta.error}</span>}\n//             </div>\n//         </div>\n//     )\n// }\n//\n// export const Textarea = (props) => {\n//     const {input, meta, textarea, ...restProps} = props\n//\n//     return (<FormControl {...props}>\n//         <textarea  {...input} {...restProps} />\n//     </FormControl>)\n// }\n//\n//\n//\n//\n// export const Input = (props) => {\n//     const {input, meta, textarea, ...restProps} = props\n//\n//     return (<FormControl {...props}>\n//         <input  {...input} {...restProps} />\n//     </FormControl>)\n// }\n//\n// export const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\n//     <Field placeholder={placeholder} name={name}\n//            validate={validators}\n//            component={component}\n//            {...props}\n//     />\n// )\n\n","import axios from 'axios'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"df87667d-e5e9-45ec-b9da-f359f4dbae31\"\n    }\n})\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {User} from \"../types/types\";\nexport type UsersResponse = {\n    items: User[],\n    totalCount: number,\n    error: null | Error\n}\n\nexport enum LoginResultCodes {\n    Success = 0,\n}\n\nexport enum CaptchResultCode {\n    CaptchIsRequired = 10\n}\n\n\nexport type APIResponseType<D = {}, RC = LoginResultCodes> = {\n    data: D\n    resultCode: RC,\n    messages: Array<string>\n}\n\nexport interface MeResponse {\n        id: number,\n        email: string,\n        login: string\n}\n\nexport interface AuthLoginResponse {\n        userId: number\n}\n\n\nexport type CaptchaResponse = {\n    url: string\n}\n","import {instance} from \"./api\";\nimport {PhotoType, ProfileType} from \"../types/types\";\nimport { APIResponseType} from \"./apiTypes\";\nimport {AxiosResponse} from \"axios\";\n\ntype SavePhotosResponseType = {\n    photos: PhotoType\n}\n\nexport const profileAPI = {\n    getUserProfile: (userId: number) => instance.get<ProfileType>(`profile/${userId}`).then((response: AxiosResponse) => response.data),\n    getUserStatus: (userId: number) => instance.get<string>(`profile/status/${userId}`).then(response => response.data),\n    updateUserStatus: (status: string) => instance.put<APIResponseType>('profile/status', {status}),\n    updateUserPhoto: (photo: File) => {\n        let formData = new FormData();\n        formData.append('image', photo)\n        return instance.put<APIResponseType<SavePhotosResponseType>>('profile/photo', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n    }\n}\n","import {instance} from \"./api\";\nimport {ProfileType} from \"../types/types\";\nimport {AuthLoginResponse, CaptchResultCode, LoginResultCodes, APIResponseType} from \"./apiTypes\";\n\nexport const authAPI = {\n    saveProfile: (profile: ProfileType) => instance.put('profile', profile),\n    loginInSystem: (email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) => {\n        return instance.post<APIResponseType<AuthLoginResponse, CaptchResultCode | LoginResultCodes>>('auth/login', {\n            email,\n            password,\n            rememberMe,\n            captcha\n        }).then(resp => resp.data)\n    },\n    logoutInSystem: () => instance.delete('auth/login'),\n\n}\n","import {usersActions} from \"./users-reducer\";\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotoType, PostType, ProfileType} from \"../types/types\";\nimport {AppStateType, BaseThunkAction, InferActionTypes} from \"./redux-store\";\n\nimport {profileAPI} from \"../api/profile-api\";\nimport {authAPI} from \"../api/auth-api\";\n\n\nconst initialState = {\n    posts: [\n        {id: 1, message: 'Hi my name is Jack', likesCount: 999},\n        {id: 2, message: 'lorem ipsum', likesCount: 123},\n        {id: 3, message: 'It\\'s my first post', likesCount: 1},\n    ] as Array<PostType>,\n    profile: null as ProfileType  | null,\n    status: '' as string,\n}\n\n\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionTypes): InitialStateType => {\n    switch (action.type) {\n        case \"profile/ADD_POST\" : {\n            const newPost = {\n                id: state.posts.length + 1,\n                message: action.postText,\n                likesCount: 0\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n        }\n        case \"profile/SET_STATUS\": {\n            return {...state, status: action.status}\n        }\n        case \"profile/SET_USER_PROFILE\": {\n            return {...state, profile: action.userProfile}\n        }\n        case \"profile/SET_USER_PHOTO\": {\n            return {...state, profile: {...state.profile, photos: action.photo} as ProfileType}\n        }\n        default: {\n            return {...state}\n        }\n    }\n}\n\nexport const profileActions = {\n    addPostActionCreator: (postText: string) => ({type: \"profile/ADD_POST\", postText} as const),\n    setUserStatus: (status: string) => ({type: \"profile/SET_STATUS\", status} as const),\n    setUserProfile: (userProfile: ProfileType) => ({type: \"profile/SET_USER_PROFILE\", userProfile} as const),\n    savePhotoSuccess: (photo: PhotoType) => ({type: \"profile/SET_USER_PHOTO\", photo} as const)\n}\n\n\nexport const setUserProfileThunk = (userId: number | null): ProfileThunkAction => async (dispatch ) => {\n    dispatch(usersActions.toggleLoading(true))\n    if (userId) {\n        let data = await profileAPI.getUserProfile(userId)\n        dispatch(profileActions.setUserProfile(data))\n        dispatch(usersActions.toggleLoading(false))\n    }\n}\n\nexport const getUserStatusThunk = (userId: number): ProfileThunkAction => async (dispatch ) => {\n    let data = await profileAPI.getUserStatus(userId)\n\n    dispatch(profileActions.setUserStatus(data))\n}\n\nexport const updateUserStatusThunk = (status: string): ProfileThunkAction => async (dispatch ) => {\n    try {\n        let response = await profileAPI.updateUserStatus(status)\n        if (response.data.resultCode === 0) dispatch(profileActions.setUserStatus(status))\n    } catch (e) {\n        console.log(\"Не удалось отправить результат\")\n    }\n}\n\nexport const sendPhotoThunk = (file: File): ProfileThunkAction => async (dispatch) => {\n    let response = await profileAPI.updateUserPhoto(file)\n\n    if (response.data.resultCode === 0) {\n        dispatch(profileActions.savePhotoSuccess(response.data.data.photos))\n    }\n\n}\n\nexport const sendProfileThunk = (profileInfo: ProfileType): ProfileThunkAction => async (dispatch, getState: () => AppStateType) => {\n    const userId = getState().auth.userId\n    const response = await authAPI.saveProfile(profileInfo)\n    if (response.data.resultCode === 0) {\n        dispatch(setUserProfileThunk(userId))\n    } else {\n        let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\n        dispatch(stopSubmit('mainInfoForm', {\n            contacts: {[key]: response.data.messages[0]}\n        }))\n        return Promise.reject(response.data.messages[0])\n    }\n}\n\ntype ProfileActionTypes = InferActionTypes<typeof profileActions>\ntype InitialStateType = typeof initialState\ntype ProfileThunkAction = BaseThunkAction<ProfileActionTypes | FormAction>\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { updateUserStatusThunk } from '../../../redux/profile-reducer';\nimport {getStatus} from \"../../../redux/users-selectors\";\n\n\n\n\nconst ProfileStatus: React.FC = () => {\n\n    const status = useSelector(getStatus)\n    const dispatch = useDispatch()\n    const [editMode, setEditMode] = useState(false)\n    const [curStatus, setStatus] = useState(status)\n\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n   const deactivateEditMode = () => {\n        setEditMode(false);\n        dispatch(updateUserStatusThunk(curStatus))\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        setStatus(e.currentTarget.value)\n    }\n\n   useEffect(() => {\n       setStatus(status)\n   }, [status])\n\n    return (\n            <div>\n                {!editMode &&\n                <div>\n                   <b> Статус:</b> <span onDoubleClick={activateEditMode }>{status || \"у пользователя нет статуса\"}</span>\n                </div>\n                }\n                {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode } value={curStatus}/>\n                </div>\n                }\n            </div>\n        )\n}\n\nexport default ProfileStatus;\n","import React from \"react\";\nimport classes from './ProfileMediaNetwork.module.css'\nexport default ({socialTitle, socialLink}) => {\n    const socialListTranslate = {\n        \"vk\": 'Вконтакте',\n        \"facebook\": 'Фейсбук',\n        \"github\": 'Гитхаб',\n        \"twitter\": 'Твиттер',\n        \"website\": 'Вебсайт',\n        \"instagram\": 'Инстаграмм',\n        \"youtube\": 'Ютуб',\n        \"mainLink\": 'Основная ссылка',\n    }\n    return (\n        <div className={classes.socialItemBLock}>\n            <b>{`${socialListTranslate[socialTitle]} : `}</b>{socialLink ? socialLink : 'Нет информации о социальной сети'}\n        </div>\n    )\n}\n","import React from \"react\";\nimport ProfileMediaNetwork from \"./ProfileMediaNetwork\";\nimport {ContactsType, ProfileType} from \"../../../types/types\";\n\ntype ProfileMainInfoType = {\n    profile: ProfileType\n    isOwner: boolean,\n    setEditMode: (v : boolean) => void\n}\n\n\nexport default (props: ProfileMainInfoType) => {\n\n    let {fullName, aboutMe, lookingForAJob, lookingForAJobDescription} = props.profile\n\n    return (\n        <div>\n            {props.isOwner && <button onClick={() => props.setEditMode(true)}>Edit profile</button>\n            }\n            <div>\n                <b>Полное имя:</b> {fullName ? fullName : \"пользователь не указал имя\"}\n            </div>\n            <div>\n                <b>О себе:</b> {aboutMe ? aboutMe : \"пользователь не указал информации о себе\"}\n            </div>\n            <div>\n                <b>Ищу работу:</b> {lookingForAJob ? lookingForAJob : \"нет\"}\n            </div>\n            <div>\n                <b>Описание желаемой работы:</b> {lookingForAJobDescription ? lookingForAJobDescription : \"нет описания желаемой работы\"}\n            </div>\n            <div>\n                <b>Контакты :</b>\n                <div>\n                    {Object\n                        .keys(props.profile.contacts)\n                        .map((contact )=> <ProfileMediaNetwork key={contact} socialTitle={contact} socialLink={props.profile.contacts[contact as keyof ContactsType]} />)}\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n","import React from \"react\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../../Common/FormsControls\";\nimport classes from \"../../Common/FormControls.module.css\";\nimport {ProfileType} from \"../../../types/types\";\n\n\ntype ProfileMainInfoFormProps = {\n    profile: ProfileType\n}\n\ntype ProfileTypeKeys = Extract<keyof ProfileType, string>\n\nconst ProfileMainInfoForm: React.FC<InjectedFormProps<ProfileType, ProfileMainInfoFormProps> & ProfileMainInfoFormProps> = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n            </div>\n            <div>\n                <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\n            </div>\n\n            <div>\n                <b>My professional skills</b>:\n                {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\n            </div>\n            <div>\n                <b>About me</b>:\n                {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\n            </div>\n            <div>\n                <b>Контакты :</b>\n                <div>\n                    <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\n                    return <div key={key}>\n                        {/*todo create keychecking for createFiels for social media because we have contacts.socialName*/}\n                        <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n                    </div>\n                })}\n                </div>\n            </div>\n            {props.error && <div className={classes.formSummaryError}>{props.error}</div>}\n            <button>Save</button>\n        </form>\n    )\n}\n\nexport const ProfileMainInfoFormContainer = reduxForm<ProfileType, ProfileMainInfoFormProps>({form: 'mainInfoForm'})(ProfileMainInfoForm)\n\n\n","import React, {ChangeEvent, useState} from \"react\";\nimport classes from './ProfileInfo.module.css'\nimport ProfileStatus from \"./ProfileStatus\";\nimport userPhoto from '../../../assets/images/userPhoto.png'\nimport ProfileMainInfo from \"./ProfileMainInfo\";\nimport {ProfileMainInfoFormContainer} from \"./ProfileMainInfoForm\";\nimport {ProfileType} from \"../../../types/types\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {sendPhotoThunk, sendProfileThunk} from \"../../../redux/profile-reducer\";\nimport {getProfile} from \"../../../redux/users-selectors\";\n\ntype PropsType = {\n    isOwner: boolean\n}\n\n\nexport default (props: PropsType) => {\n\n\n    const [editMode, setEditMode] = useState(false)\n    const dispatch = useDispatch();\n\n    const profile = useSelector(getProfile)\n\n    if (!profile) {\n        return <div>Пользователь не предоставил информации о себе</div>\n    }\n\n    const sendPhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const target = e.target\n        if (target.files?.length) {\n            dispatch(sendPhotoThunk(target.files[0]))\n        }\n    }\n\n    const submitProfileForm = (data: ProfileType) => {\n        // todo: remove then\n        // @ts-ignore\n        dispatch(sendProfileThunk(data)).then(() => setEditMode(false))\n    }\n\n    return (\n        <>\n            <div className={classes.profileDescription}>\n                <img width={200} src={profile.photos.large || userPhoto} alt=\"profilePhoto\"/>\n                {\n                    props.isOwner && <input type=\"file\" onChange={sendPhotoHandler}/>\n                }\n                <ProfileStatus />\n                { editMode\n                    ? <ProfileMainInfoFormContainer initialValues={profile} onSubmit={submitProfileForm} profile={profile} />\n                    : <ProfileMainInfo setEditMode={setEditMode} isOwner={props.isOwner} profile={profile}/>}\n            </div>\n        </>\n    )\n}\n","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg'\r\n                 alt={'profile_img'}/>\r\n                 <span>\r\n                     {props.message}\r\n                 </span>\r\n            <div>\r\n                <span>{props.likesCount} like</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React, {createRef} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {maxLength, minLength, requiredFields} from \"../../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../../Common/FormsControls\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\n\r\nconst MyPosts: React.FC<PostsPropsType & PostsDispatchType> = React.memo((props) => {\r\n    const messagesRef = createRef()\r\n\r\n\r\n    const submitHandler = (values: FormPostProps) => {\r\n        props.addPostActionCreator(values.postText)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.PostsBlock}>\r\n                <h3>My posts</h3>\r\n                <div>\r\n                    <PostReduxForm onSubmit={submitHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.container} ref={messagesRef as React.RefObject<HTMLDivElement>}>\r\n                <div className={s.posts}>\r\n                    {props.posts.map((post => <Post key={post.id.toString()} id={post.id} message={post.message}\r\n                                                    likesCount={post.likesCount}/>))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nconst maxLength30 = maxLength(30);\r\nconst minLength5 = minLength(5);\r\n\r\nconst PostForm: React.FC<InjectedFormProps<FormPostProps, OwnProps> & OwnProps> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<PostsFormKeys>(\"your post message\", \"postText\", [requiredFields, minLength5, maxLength30], Textarea)}\r\n            <button>Add post</button>\r\n        </form>\r\n\r\n    )\r\n}\r\nconst resetAfterSubmit = (result: unknown, dispatch: Dispatch) => dispatch(reset('postForm'))\r\n\r\nconst PostReduxForm = reduxForm<FormPostProps>({\r\n    form: 'postForm',\r\n    onSubmitSuccess: resetAfterSubmit\r\n})(PostForm)\r\n\r\nexport default MyPosts;\r\n\r\nexport type PostsPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type PostsDispatchType = {\r\n    addPostActionCreator: (postText: string) => void\r\n}\r\n\r\n\r\ntype PostsFormKeys = Extract<keyof FormPostProps, string>\r\n\r\ntype FormPostProps = {\r\n    postText: string\r\n}\r\n\r\ntype OwnProps = {}\r\n","import {profileActions} from \"../../../redux/profile-reducer\";\nimport MyPosts, {PostsDispatchType, PostsPropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts\n    } as PostsPropsType\n}\n\nlet MyPostsContainer = connect<PostsPropsType, PostsDispatchType, {}, AppStateType >(mapStateToProps, {addPostActionCreator: profileActions.addPostActionCreator})(MyPosts)\nexport default MyPostsContainer;\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsLoading} from \"../../redux/users-selectors\";\r\n\r\n\r\nconst Profile = (props: {isOwner: boolean}) => {\r\n\r\n    const isLoading = useSelector(getIsLoading);\r\n\r\n    return (\r\n        <div>\r\n            {isLoading\r\n                ? <Loader/>\r\n                : <>\r\n                    <ProfileInfo isOwner={props.isOwner} />\r\n                    <MyPostsContainer/>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserStatusThunk, setUserProfileThunk} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {getUserId} from \"../../redux/users-selectors\";\r\n\r\n\r\nconst ProfileContainer: React.FC<ProfileProps> = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const authorizedUserId = useSelector(getUserId)\r\n\r\n    const checkUser = () => {\r\n        let userId: number | null = +props.match.params.userId\r\n        if (!userId) {\r\n            userId = authorizedUserId\r\n            if (!userId) {\r\n                props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.log('User id should exists')\r\n        } else {\r\n            dispatch(setUserProfileThunk(userId))\r\n            dispatch(getUserStatusThunk(userId))\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        checkUser()\r\n    }, [props.match.params.userId])\r\n\r\n        return <Profile isOwner={!props.match.params.userId} />\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfileProps =  RouteComponentProps<PathParamsType>\r\n\r\n","import React from \"react\";\n\nexport default () => {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n","import React from \"react\";\n\nexport default () => {\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n","import React from \"react\";\n\nexport default () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n","import {CaptchaResponse} from \"./apiTypes\";\nimport {instance} from \"./api\";\n\nexport const securityAPI = {\n    getCaptcha: () => instance.get<CaptchaResponse>(`security/get-captcha-url`).then(resp => resp.data)\n}\n","import {usersAPI} from \"../api/users-api\";\nimport {CaptchResultCode, LoginResultCodes} from \"../api/apiTypes\"\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {BaseThunkAction, InferActionTypes} from \"./redux-store\";\nimport {securityAPI} from \"../api/security-api\";\nimport {authAPI} from \"../api/auth-api\";\n\n\nconst initialState = {\n    userId: null as (number | null),\n    email: null as (string | null),\n    login: null as ( string | null),\n    isFetching: false,\n    isAuth: false,\n    captchaUrl: null as (string | null)\n}\n\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionType): InitialStateType => {\n    switch (action.type) {\n        case \"auth/SET_CAPTCHA\":\n        case \"auth/SET_USER_DATA\": {\n            return { ...state, ...action.payload}\n        }\n        default: {\n            return {...state}\n        }\n    }\n}\n\nexport const authActions = {\n   setUserData : (userId: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\n        type: \"auth/SET_USER_DATA\",\n        payload: {userId, login, email, isAuth}\n    } as const),\n   setCaptcha : (captchaUrl: string) => ({type: \"auth/SET_CAPTCHA\", payload: {captchaUrl}} as const)\n}\n\n\nexport const setUserDataThunk = (): AuthThunkAction => dispatch => {\n    return usersAPI.getUserData()\n        .then(data => {\n            if (data.resultCode === LoginResultCodes.Success) {\n                const {id, login, email} = data.data\n                dispatch(authActions.setUserData(id, login, email, true))\n            }\n        });\n}\n\nexport const loginUserThunk = (email: string, password: string, rememberMe: boolean, captchaUrl: string): AuthThunkAction => async  dispatch => {\n    authAPI.loginInSystem(email, password, rememberMe, captchaUrl).then(data => {\n        if (data.resultCode === LoginResultCodes.Success) {\n            dispatch(setUserDataThunk())\n        } else {\n            if (data.resultCode === CaptchResultCode.CaptchIsRequired) {\n                dispatch(getCaptchaThunk())\n            }\n            let message = data.messages ? data.messages[0] : \"Some error\"\n            dispatch(stopSubmit('login', {_error: message}))\n        }\n    })\n}\n\nexport const logoutUserThunk = (): AuthThunkAction => async dispatch => {\n    authAPI.logoutInSystem().then(response => {\n        if (response.data.resultCode === LoginResultCodes.Success) {\n            dispatch(authActions.setUserData(null, null, null, false))\n        }\n    })\n}\n\nexport const getCaptchaThunk = (): AuthThunkAction => async dispatch => {\n    const data = await securityAPI.getCaptcha();\n    const captchaUrl = data.url;\n\n    dispatch(authActions.setCaptcha(captchaUrl))\n}\n\n\nexport type InitialStateType = typeof initialState\ntype AuthActionType = InferActionTypes<typeof authActions>\ntype AuthThunkAction = BaseThunkAction<AuthActionType | FormAction>\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginUserThunk} from \"../../redux/auth-reducer\";\nimport {Input} from \"../Common/FormsControls\";\nimport {requiredFields} from \"../../utils/validators/validators\";\nimport {Redirect} from \"react-router-dom\";\nimport classes from '../Common/FormControls.module.css'\nimport {AppStateType} from \"../../redux/redux-store\";\n\n\ntype LoginFormValuesType = {\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n}\n\ninterface OwnProps  {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, OwnProps> & OwnProps> = (props) => {\n    const {handleSubmit} = props\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field\n                    type=\"text\"\n                    component={Input}\n                    name={'email'}\n                    placeholder='email'\n                    validate={[requiredFields]}\n                />\n            </div>\n            <div>\n                <Field\n                    type=\"text\"\n                    component={Input}\n                    name={'password'}\n                    placeholder='password'\n                    validate={[requiredFields]}\n                />\n            </div>\n            <div>\n                <Field type='checkbox' name={'rememberMe'} component={Input}/>Remember me\n            </div>\n            {props.error && <div className={classes.formSummaryError}>{props.error}</div>}\n            { props.captchaUrl && <img src={props.captchaUrl} alt=\"captcha\"/>}\n            { props.captchaUrl && <div>\n                <Field\n                    type=\"text\"\n                    component={Input}\n                    name={'captcha'}\n                    placeholder='Enter text from picture'\n                    validate={[requiredFields]}\n                />\n            </div>}\n            <div>\n                <button type='submit'>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnProps>({form: 'login'})(LoginForm)\n\nexport const LoginPage: React.FC = () => {\n\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const dispatch = useDispatch();\n\n    const submitForm = ({email, password, rememberMe, captcha} : LoginFormValuesType) => {\n        dispatch(loginUserThunk(email, password, rememberMe, captcha))\n    }\n\n    if (isAuth) {\n        return (\n            <Redirect to={'/profile'}/>\n        )\n    }\n    return (\n        <>\n            <h1>Login</h1>\n            <LoginReduxForm captchaUrl={captchaUrl} onSubmit={submitForm}/>\n        </>\n    )\n}\n\n\n","import {setUserDataThunk} from './auth-reducer';\nimport {InferActionTypes} from \"./redux-store\";\n\n\nconst initialState = {\n    isInitialiazed: false\n}\n\nexport type IInitialState = typeof  initialState\n\nexport const appReducer = (state: IInitialState = initialState, action: AppActionTypes): IInitialState => {\n    switch (action.type) {\n        case \"SET_INITIALIAZE\": {\n            return {...state, isInitialiazed: true}\n        }\n        default: {\n            return {...state}\n        }\n    }\n}\n\nexport const appActions = {\n    setInitialiazed: () => ({type: \"SET_INITIALIAZE\"} as const)\n}\n\ntype AppActionTypes = InferActionTypes<typeof appActions>\n\nexport const initialiazeApp = () => (dispatch: any) => {\n    let promise = dispatch(setUserDataThunk())\n\n    promise.then(() => {\n        dispatch(appActions.setInitialiazed())\n    })\n}\n\n\n","type ActionType = {\n    type: string\n}\n\ntype FriendType = {\n    id: number,\n    name: string,\n    url: string\n}\n\ntype InitialStateType = typeof  initialState;\n\nconst initialState = {\n    friends: [\n        {\n            id: 1,\n            name: 'Sasha',\n            url: 'https://www.freepngimg.com/thumb/shape/30004-8-circle-image.png'\n        },\n        {\n            id: 2,\n            name: 'Jenia',\n            url: 'https://www.freepngimg.com/thumb/shape/30004-8-circle-image.png'\n        },\n        {\n            id: 3,\n            name: 'Ania',\n            url: 'https://www.freepngimg.com/thumb/shape/30004-8-circle-image.png'\n        }\n    ] as Array<FriendType>\n}\n\nexport const sidebarReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        default: {\n            return {...state}\n        }\n    }\n}\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./auth-reducer\";\nimport {appReducer} from \"./app-reducer\";\nimport {reducer as formReducer} from 'redux-form'\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {chatReducer} from \"./chat-reducer\";\n\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n    typeof store,\n    unknown,\n    Action<string>>\n\nconst reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    sidebar: sidebarReducer,\n    auth: authReducer,\n    app: appReducer,\n    chat: chatReducer,\n    form: formReducer\n})\n\nexport type InferActionTypes<T> = T extends { [key: string]: (...args: any[]) => infer U}? U : never\n\ntype RootReducer = typeof reducers;\nexport type AppStateType = ReturnType<RootReducer>\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store\n\n\nexport type BaseThunkAction<AT extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, AT>\n","import React from \"react\";\nimport Loader from \"../components/Loader/Loader\";\n\nexport function withSuspense<WCP>(Component: React.ComponentType<WCP>){\n    return (props: WCP) => <React.Suspense fallback={<Loader />}>\n        <Component {...props} />\n    </React.Suspense>\n}\n\n\n\n\n\n\n\n\n","import {AppStateType} from \"./redux-store\";\n\nexport const getIsAuth = (state: AppStateType)=> state.auth.isAuth\nexport const selectCurrentUserLogin = (state: AppStateType)=> state.auth.login\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsAuth, selectCurrentUserLogin} from \"../../redux/auth-selectors\";\r\nimport {logoutUserThunk} from \"../../redux/auth-reducer\";\r\n\r\n\r\nconst Header: React.FC = () => {\r\n    const isAuth = useSelector(getIsAuth);\r\n    const login = useSelector(selectCurrentUserLogin)\r\n    const dispatch = useDispatch();\r\n    const logout = () => {\r\n        dispatch(logoutUserThunk())\r\n    }\r\n\r\n    const {Header} = Layout;\r\n    return <Header className=\"header\">\r\n        <div className=\"logo\"/>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"5\"><Link to={'/users'}>Developers</Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col push={3} span={1}>\r\n                            <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                        </Col>\r\n                        <Col push={3} span={5}>\r\n                            <Button onClick={logout}>Logout</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col push={5} span={6}>\r\n                        <Button>\r\n                            <Link to={'/login'}>Login</Link>\r\n                        </Button>\r\n                    </Col>\r\n                }\r\n        </Row>\r\n    </Header>\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css'\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport Settings from \"./components/Settings/Settings\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport {LoginPage} from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initialiazeApp} from \"./redux/app-reducer\";\nimport Loader from \"./components/Loader/Loader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {Button, Layout, Menu} from \"antd\";\nimport {LaptopOutlined, UserOutlined, WechatOutlined} from '@ant-design/icons';\nimport Header from \"./components/Header/Header\";\n\n\nconst {SubMenu} = Menu;\nconst {Content, Footer, Sider} = Layout;\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\nconst UsersContainer = React.lazy(() => import(\"./components/Users/UsersContainer\"))\nconst ChatPage = React.lazy(() => import(\"./pages/chat/ChatPage\"))\n\nconst DialogsWithSuspended = withSuspense(DialogsContainer)\nconst ChatWithSuspended = withSuspense(ChatPage)\n\ntype MapStateType = ReturnType<typeof mapStateToProps>;\ntype MapDispatchType = {\n    initialiazeApp: () => void\n}\n\nclass App extends React.Component<MapStateType & MapDispatchType> {\n\n    handleAllUncaughtErrors = (error: PromiseRejectionEvent) => {\n        console.log('error', error)\n    }\n\n    componentDidMount() {\n        this.props.initialiazeApp()\n        window.addEventListener('unhandledrejection', this.handleAllUncaughtErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.handleAllUncaughtErrors)\n    }\n\n\n    render() {\n        if (!this.props.initialiazed) return <Loader/>\n\n        return (<Layout>\n            <React.Suspense fallback={<Loader/>}>\n                <Header/>\n                <Content style={{padding: '0 50px'}}>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                defaultSelectedKeys={['1']}\n                                style={{height: '100%'}}\n                            >\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Profile\">\n                                    <Menu.Item key=\"1\"><Link to={'/profile'}>My profile</Link></Menu.Item>\n                                    <Menu.Item key=\"2\"><Link to={'/dialogs'}>Dialogs</Link></Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\n                                    <Menu.Item key=\"5\"><Link to={'/users'}>All developers</Link></Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<WechatOutlined />} title=\"Chat\">\n                                    <Menu.Item key=\"6\"><Link to={'/chat'}>Chat</Link></Menu.Item>\n                                </SubMenu>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n                            <Switch>\n                                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                                <Redirect exact from={'/'} to={'/profile'}/>\n                                <Route path='/login' render={() => <LoginPage/>}/>\n                                <Route path='/dialogs' render={() => <DialogsWithSuspended/>}/>\n                                <Route path='/users' render={() => <UsersContainer/>}/>\n                                <Route path='/settings' component={Settings}/>\n                                <Route path='/news' component={News}/>\n                                <Route path='/music' component={Music}/>\n                                <Route path='/chat' render={() => < ChatWithSuspended/>}/>\n                                <Route path='*' render={() => <div>\n                                    404 component not found\n                                    <Button type={\"primary\"} color={'blue'} danger>Ok</Button>\n                                </div>}/>\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Made by Jack ©2020</Footer>\n            </React.Suspense>\n        </Layout>)\n    }\n}\n\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialiazed: state.app.isInitialiazed\n})\n\nconst mapDispatchToProps = ({\n    initialiazeApp\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps)\n)(App)\n\n\nfunction AppContainerRender() {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default AppContainerRender\n\n","import * as serviceWorker from './serviceWorker';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport './index.css';\nimport AppContainerRender from \"./App\";\n\nReactDOM.render( <AppContainerRender />, document.getElementById('root')\n)\n\n\nserviceWorker.unregister();\n","import {AppStateType} from \"./redux-store\";\n\nexport const getUsers = (state: AppStateType)=> state.usersPage.users\nexport const getTotalUsersCount = (state: AppStateType) => state.usersPage.totalUsersCount\nexport const getPageSize = (state: AppStateType) => state.usersPage.pageSize\nexport const getCurrentPage = (state: AppStateType) => state.usersPage.currentPage\nexport const getIsLoading = (state: AppStateType) => state.usersPage.isLoading\nexport const getIsFollowing = (state: AppStateType) => state.usersPage.isFollowingInProgress\nexport const getFilter = (state: AppStateType) => state.usersPage.filter\nexport const getStatus = (state: AppStateType) => state.profilePage.status\nexport const getProfile = (state: AppStateType) => state.profilePage.profile\nexport const getUserId = (state: AppStateType) => state.auth.userId\n","export type FieldValidator = (value : string) => string | undefined\n\n\nexport const requiredFields: FieldValidator = (value) => {\n    if(value) return undefined\n    return \"Field is required\"\n}\n\nexport const maxLength = (length: number): FieldValidator => value => {\n    if(!value || value.length > length) return `Should be less than ${length}`\n    return undefined\n}\n\nexport const minLength = (length: number): FieldValidator => value => {\n    if(!value || value.length < length) return `Should be bigger than ${length}`\n    return undefined\n}\n\n","import React from \"react\";\nimport styles from \"./Loader.module.css\"\n\n\nfunction Loader() {\n    return (\n        <div className={styles.container}>\n            <span className={styles.loader}>Load&nbsp;ng</span>\n        </div>)\n}\n\nexport default Loader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3gwRx\",\"error\":\"FormControls_error__3jq7r\",\"formSummaryError\":\"FormControls_formSummaryError__2BoeY\"};","import {MeResponse, UsersResponse, APIResponseType} from \"./apiTypes\";\nimport {instance} from \"./api\";\n\nexport const usersAPI = {\n    getUsers: (currentPage: number, pageSize: number, term: string, friend: null | boolean = null) => instance.get<UsersResponse>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&fiend=${friend}`)).then(response => response.data),\n    unfollowUser: (userId: number) => instance.delete(`follow/${userId}`).then(response => response.data),\n    followUser: (userId: number) => instance.post<APIResponseType>(`follow/${userId}`).then(response => response.data),\n    getUserData: () => instance.get<APIResponseType<MeResponse>>('auth/me').then(response => response.data),\n}\n","import {usersAPI} from \"../api/users-api\";\nimport {User} from \"../types/types\";\nimport { BaseThunkAction, InferActionTypes} from \"./redux-store\";\n\nconst initialState = {\n    users: [] as Array<User>,\n    pageSize: 5,\n    totalUsersCount: 0 ,\n    currentPage: 1,\n    isLoading: false,\n    isFollowingInProgress: [] as Array<number>,// array of users id\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nexport const usersReducer = (state = initialState, action: UsersActionTypes): InitialStateType => {\n    switch (action.type) {\n        case \"users/TOGGLE_FOLLOWING\": {\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, isFollow: !u.isFollow}\n                    }\n                    return u\n                })\n            }\n        }\n        case \"users/SET_USERS\": {\n            return {...state, users: [...action.users]}\n        }\n        case \"users/FOLLOWING_IN_PROGRESS\": {\n            return {\n                ...state,\n                isFollowingInProgress: action.following\n                    ? [...state.isFollowingInProgress, action.userId]\n                    : state.isFollowingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        case \"users/SET_CURRENT_PAGE\": {\n            return {...state, currentPage: action.currentPage}\n        }\n        case \"users/SET_TOTAL_COUNT\": {\n            return {...state, totalUsersCount: action.totalUsersCount}\n        }\n        case \"users/SET_TERM\": {\n            return {...state, filter: action.payload }\n        }\n        case \"users/TOGGLE_LOADING\": {\n            return {...state, isLoading: action.isFetching}\n        }\n\n        default: {\n            return {...state}\n        }\n    }\n}\n\n\nexport const usersActions = {\n    toggleFollowing : (userId: number) => ({type: \"users/TOGGLE_FOLLOWING\", userId} as const),\n    setUsers : (users: Array<User>) => ({type: \"users/SET_USERS\", users} as const),\n    setCurrentPage : (currentPage: number) => ({type: \"users/SET_CURRENT_PAGE\", currentPage} as const),\n    setFilter : (filter: FilterType) => ({type: \"users/SET_TERM\", payload: filter} as const),\n    setTotalUsersCount : (totalUsersCount: number) => ({type: \"users/SET_TOTAL_COUNT\", totalUsersCount} as const),\n    toggleLoading : (isFetching: boolean) => ({type: \"users/TOGGLE_LOADING\", isFetching} as const),\n    followingInProgress : (following: boolean, userId: number) => ({type: \"users/FOLLOWING_IN_PROGRESS\", following, userId} as const)\n}\n\n\n\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number, filter: FilterType): UsersThunkAction  => async (dispatch) => {\n    dispatch(usersActions.toggleLoading(true))\n    dispatch(usersActions.setFilter(filter))\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\n    dispatch(usersActions.setUsers(data.items))\n    dispatch(usersActions.setTotalUsersCount(data.totalCount))\n    dispatch(usersActions.setCurrentPage(currentPage))\n    dispatch(usersActions.toggleLoading(false))\n}\n\nexport const followingUser = (userId: number): UsersThunkAction => async (dispatch) => {\n    dispatch(usersActions.followingInProgress(true, userId))\n    let data = await usersAPI.followUser(userId)\n\n    if (data.resultCode === 0) {\n        dispatch(usersActions.toggleFollowing(userId))\n    }\n    dispatch(usersActions.followingInProgress(false, userId))\n}\n\n\nexport const unfollowingUser = (userId: number): UsersThunkAction => async (dispatch) => {\n    dispatch(usersActions.followingInProgress(true, userId))\n\n    let data = await usersAPI.unfollowUser(userId)\n    if (data.resultCode === 0) {\n        dispatch(usersActions.toggleFollowing(userId))\n    }\n    dispatch(usersActions.followingInProgress(false, userId))\n}\n\nexport type InitialStateType = typeof initialState\ntype UsersActionTypes = InferActionTypes<typeof usersActions>\nexport type FilterType = typeof initialState.filter\nexport type UsersThunkAction = BaseThunkAction<UsersActionTypes>\n\n"],"sourceRoot":""}