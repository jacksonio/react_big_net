{"version":3,"sources":["components/Users/users.module.css","components/Users/Paginator.module.css","components/Users/Paginator.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["module","exports","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","className","styles","paginator","onClick","filter","p","map","key","toString","random","cn","selectedPage","pageNumber","usersFormValidate","UsersSearchForm","React","memo","props","useSelector","getFilter","enableReinitialize","initialValues","term","friend","validate","onSubmit","values","setSubmitting","onFilterChanged","isSubmitting","type","name","as","value","disabled","Users","users","getUsers","totalUsersCount","getTotalUsersCount","getCurrentPage","getPageSize","isFollowingInProgress","getIsFollowing","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","getUsersThunkCreator","query","String","pathname","u","id","to","src","photos","small","userPhoto","alt","some","userId","isFollow","unfollowingUser","followingUser","followingUserHandler","status","UsersPage","isLoading","getIsLoading","Loader"],"mappings":"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","file":"static/js/4.0784df17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\",\"selectedPage\":\"users_selectedPage__1mnwI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1uFzw\",\"pageNumber\":\"Paginator_pageNumber__2AXNx\",\"selectedPage\":\"Paginator_selectedPage__3aoIo\"};","import React, {useState} from \"react\";\nimport styles from \"./Paginator.module.css\";\nimport cn from \"classnames\";\n\nexport interface PaginatorProps {\n    totalItemsCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (page: number) => void\n    portionSize?: number\n}\n\n\nlet Paginator: React.FC<PaginatorProps> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize)\n    let [portionNumber, setPortionNumber] = useState(1)\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionNumber = portionNumber * portionSize;\n\n\n    return (\n        <div className={styles.paginator}>\n            {portionNumber > 1 &&\n            <button onClick={() => setPortionNumber((portionNumber - 1))}>Left</button>}\n\n            {pages\n                .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\n                .map(p => <span key={p.toString() + Math.random()}\n                    className={cn({\n                        [styles.selectedPage]: currentPage === p\n                    }, styles.pageNumber)}\n                    onClick={() => {\n                        onPageChanged(p)\n                    }}\n                >\n                    {p}\n                </span>)}\n            {portionCount > portionNumber &&\n            <button onClick={() => {\n                setPortionNumber(portionNumber + 1)\n            }}>NEXT</button>}\n        </div>\n    )\n}\n\nexport default Paginator\n","import {FilterType} from \"../../redux/users-reducer\";\nimport {Field, Form, Formik} from \"formik\";\nimport React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {getFilter} from \"../../redux/users-selectors\";\n\nconst usersFormValidate = () => {\n    return {};\n}\n\ntype FriendFormType = \"null\" | 'true' | 'false'\ntype FormType = {\n    term: string,\n    friend: FriendFormType\n}\n\ntype UsersSearchFormProps = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<UsersSearchFormProps> = React.memo((props) => {\n\n    const filter = useSelector(getFilter)\n\n\n    const submitHandler = (values: FormType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void}) => {\n\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n\n    return <Formik\n        enableReinitialize\n        initialValues={{ term: filter.term, friend: filter.friend as unknown as FriendFormType}}\n        validate={usersFormValidate}\n        onSubmit={submitHandler}\n    >\n        {({ isSubmitting }) => (\n            <Form>\n                <Field type=\"text\" name=\"term\" />\n                <Field name=\"friend\" as=\"select\" className=\"my-select\">\n                    <option value=\"null\">All</option>\n                    <option value=\"true\">Friends</option>\n                    <option value=\"false\">All but friends</option>\n                </Field>\n                <button type=\"submit\" disabled={isSubmitting}>\n                    Submit\n                </button>\n            </Form>\n        )}\n    </Formik>\n})\n","import React, {useEffect} from \"react\";\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../assets/images/userPhoto.png\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport Paginator from \"./Paginator\";\nimport {FilterType, followingUser, getUsersThunkCreator, unfollowingUser} from \"../../redux/users-reducer\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCurrentPage,\n    getFilter,\n    getIsFollowing,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers\n} from \"../../redux/users-selectors\";\nimport * as queryString from \"querystring\";\n\n\nexport const Users: React.FC = () => {\n\n\n    const users = useSelector(getUsers);\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const isFollowingInProgress = useSelector(getIsFollowing)\n    const filter = useSelector(getFilter)\n\n\n    const dispatch = useDispatch();\n\n    const history = useHistory()\n\n    type QueryParams = { term?: string; page?: string; friend?: string }\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParams\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (parsed.page) actualPage = +parsed.page\n        if (parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n        if (parsed.friend) actualFilter = {\n            ...actualFilter,\n            friend: parsed.friend === 'null' ? null : parsed.friend === \"true\" ? true : false\n        }\n\n        dispatch(getUsersThunkCreator(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n\n        const query: QueryParams = {}\n\n        if(!!filter.term) query.term = filter.term\n        if(filter.friend !== null) query.friend = String(filter.friend)\n        if(currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/users',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(getUsersThunkCreator(1, pageSize, filter))\n    }\n\n    const unfollowingUserHandler = (userId: number) => {\n        dispatch(unfollowingUser(userId))\n    }\n\n    const followingUserHandler = (userId: number) => {\n        dispatch(followingUser(userId))\n    }\n\n    const onPageChange = (page: number) => {\n        dispatch(getUsersThunkCreator(page, pageSize, filter))\n    }\n\n    return (\n        <div>\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\n            <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage}\n                       onPageChanged={onPageChange}/>\n            {\n                users.map(u => <div key={u.id}>\n                <span>\n                    <div>\n                        <NavLink to={`/profile/${u.id}`}>\n                            <img src={u.photos.small !== null ? u.photos.small : userPhoto}\n                                 alt={'userPhoto'}\n                                 className={styles.userPhoto}\n                            />\n                        </NavLink>\n\n                    </div>\n                    <div>\n                         <button disabled={isFollowingInProgress.some(id => id === u.id)} onClick={() => {\n                             if (u.isFollow) {\n                                 unfollowingUserHandler(u.id)\n\n                             } else {\n                                 followingUserHandler(u.id)\n                             }\n\n                         }}\n                         >\n                             {u.isFollow ? \"Unfollow\" : \"Follow\"}\n                         </button>\n\n                    </div>\n                </span>\n                    <span>\n                    <span>\n                        <div>{u.name}</div>\n                        <div>{u.status}</div>\n                    </span>\n                    <span>\n                        <div>{\"u.location.country\"}</div>\n                        <div>{\"u.location.city\"}</div>\n                    </span>\n                </span>\n                </div>)\n            }\n        </div>\n    )\n}\n","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {Users} from \"./Users\";\nimport Loader from \"../Loader/Loader\";\nimport {getIsLoading,} from \"../../redux/users-selectors\";\n\n\nconst UsersPage: React.FC = () => {\n\n    const isLoading = useSelector(getIsLoading);\n\n    return <>\n        {isLoading ? < Loader/> : null}\n        < Users/>\n    </>\n}\n\nexport default UsersPage\n\n\n\n"],"sourceRoot":""}