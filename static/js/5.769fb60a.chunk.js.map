{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.ts"],"names":["module","exports","props","path","id","className","s","dialog","active","to","name","message","minLength2","minLength","maxLength15","maxLength","DialogsReduxForm","reduxForm","form","onSubmitSuccess","_","dispatch","reset","handleSubmit","onSubmit","createField","requiredFields","Textarea","Dialogs","dialogsElements","dialogsStore","dialogs","map","d","DialogItem","key","toString","messagesElements","messages","m","Message","dialogsItems","values","submitHandler","textarea","compose","connect","state","dialogsPage","dialogsActions","addMessageActionCreator"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCMnK,WAACC,GACZ,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAEI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCRvB,WAACR,GAAD,OAAgC,yBAAKG,UAAWC,IAAEC,QAASL,EAAMS,U,iCC6B1EC,EAAaC,YAAU,GACvBC,EAAcC,YAAU,IAgBxBC,EAAmBC,YAAsD,CAC3EC,KAAM,cACNC,gBALqB,SAACC,EAASC,GAAV,OAAiCA,EAASC,YAAM,kBAGhDL,EAb0F,SAACf,GAAW,IACpHqB,EAAgBrB,EAAhBqB,aACP,OACI,0BAAMC,SAAUD,GACXE,YAA6B,qBAAsB,WAAY,CAACC,IAAgBd,EAAYE,GAAca,KAC3G,2CAaGC,EA5C4B,SAAC1B,GAExC,IAAI2B,EAAkB3B,EAAM4B,aAAaC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAD,CAAYC,IAAKF,EAAE7B,GAAGgC,WAAY1B,KAAMuB,EAAEvB,KAAMN,GAAI6B,EAAE7B,QAC5GiC,EAAmBnC,EAAM4B,aAAaQ,SAASN,KAAI,SAAAO,GAAC,OAAI,kBAACC,EAAD,CAASL,IAAKI,EAAEnC,GAAGgC,WAAYzB,QAAS4B,EAAE5B,aAMtG,OACI,yBAAKN,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAEmC,cACbZ,GAEL,yBAAKxB,UAAWC,IAAEgC,UACd,kBAACtB,EAAD,CAAkBQ,SAVb,SAACkB,GACdxC,EAAMyC,cAAcD,EAAOE,aAUlBP,K,gBCdFQ,sBACXC,aAPkB,SAACC,GACnB,MAAO,CACHjB,aAAciB,EAAMC,eAKC,CAAEL,cAAeM,IAAeC,0BAD9CL,CAEbjB","file":"static/js/5.769fb60a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from \"react\";\nimport s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {DialogsType} from \"../../../redux/dialogs-reducer\";\n\n\n\nexport default (props: DialogsType) => {\n    let path = \"/dialogs/\" + props.id;\n    return (\n\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from \"../Dialogs.module.css\";\n\n\nexport default (props: { message: string }) => <div className={s.dialog}>{props.message}</div>\n","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {InjectedFormProps, reduxForm, reset} from \"redux-form\";\nimport {createField, Textarea} from \"../Common/FormsControls\";\nimport {maxLength, minLength, requiredFields} from \"../../utils/validators/validators\";\nimport {initialStateType} from \"../../redux/dialogs-reducer\";\nimport { Dispatch } from 'redux';\n\n\nconst Dialogs: React.FC<DialogsOwnProps> = (props) => {\n\n    let dialogsElements = props.dialogsStore.dialogs.map(d => <DialogItem key={d.id.toString()} name={d.name} id={d.id}/>);\n    let messagesElements = props.dialogsStore.messages.map(m => <Message key={m.id.toString()} message={m.message}/>);\n\n    const sendForm = (values: DialogsFormValuesType) => {\n        props.submitHandler(values.textarea)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <DialogsReduxForm onSubmit={sendForm} />\n                {messagesElements}\n            </div>\n        </div>\n    )\n}\n\nconst minLength2 = minLength(2);\nconst maxLength15 = maxLength(15)\n\n\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, OwnDialogsFormProps> & OwnDialogsFormProps> = (props) => {\n    const {handleSubmit} = props\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<DialogsFormKeys>(\"Enter your message\", \"textarea\", [requiredFields, minLength2, maxLength15], Textarea)}\n            <button>Add</button>\n        </form>\n    )\n}\n\nconst resetAfterSubmit = (_: never,dispatch: Dispatch) => dispatch(reset('dialogsForm'));\n\n\nconst DialogsReduxForm = reduxForm<DialogsFormValuesType, OwnDialogsFormProps>({\n    form: 'dialogsForm',\n    onSubmitSuccess: resetAfterSubmit,\n})(DialogsForm)\n\nexport default Dialogs;\n\n\n\ntype OwnDialogsFormProps = {};\n\ntype DialogsOwnProps = {\n    dialogsStore: initialStateType\n    submitHandler: (messageText: string) => void\n}\n\ntype DialogsFormValuesType = {\n    textarea: string\n}\n\ntype DialogsFormKeys = Extract<keyof DialogsFormValuesType, string>\n","import {dialogsActions} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport React from \"react\";\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsStore: state.dialogsPage,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, { submitHandler: dialogsActions.addMessageActionCreator}),\n)(Dialogs)\n"],"sourceRoot":""}